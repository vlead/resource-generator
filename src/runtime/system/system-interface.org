
#+TITLE: System Interface implementation
#+AUTHOR: VLEAD
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue between the =rest= and =system=.  The world of
  =rest= uses =json= and the world of =system= uses objects. System Interface
  allows these two worlds to talk to each other.

* The =System Interface= class

** Constructor
#+NAME: class_system_interface
#+BEGIN_SRC python
class SystemInterface():

    # Should not create an instance of system interface
    def __init__(self):
        pass

#+END_SRC

** Methods

#+NAME: methods_system_interface
#+BEGIN_SRC python
    @staticmethod
    def build_resource(url):
        repo_name = url.split('/')[-1]
        # create the build direcotry
        System.change_dir(Config.TMP_PATH)
        System.create_dir('build')
        System.change_dir('build/')
        System.create_dir(repo_name)
        build_path = Config.TMP_PATH + '/build/' + repo_name + '/'
        
        # clone the repo from github
        System.change_dir(Config.TMP_PATH)
        System.clone_git_repo(url)
        source_path = repo_name+'/src/'
        System.change_dir(source_path)

        # generate the files
        files = System.get_files()
        for file in files:
            System.build(file, build_path)

        # delete the cloned repo
        System.change_dir(Config.TMP_PATH)
        System.del_dir(repo_name)
        
#+END_SRC

** Imports
#+NAME: imports_system_interface
#+BEGIN_SRC python
from runtime.system.system import System
from runtime.config.config import Config

#+END_SRC

* Tangle :boilerplate:
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_system_interface>>
<<class_system_interface>>
<<methods_system_interface>>
#+END_SRC
